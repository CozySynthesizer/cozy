AnalyticsStorage:

    type LogEntry = {
        queryId    : Long,
        subqueryId : Int,
        fragmentId : Int,
        opId       : Int,
        startTime  : Long,
        endTime    : Long,
        numTuples  : Long }

    state entries : Bag<LogEntry>

    assume empty [e | e <- entries, e.endTime < e.startTime];

    op log(e : LogEntry)
        entries.add(c)

    // edu.washington.escience.myria.parallelServer.startLogDataStream()
    query getLogData(
            queryId : Long,
            subqueryId : Int,
            fragmentId : Long,
            start : Long,
            end : Long,
            minSpanLength : Long,
            onlyRootOperator : Bool)
        assume start < end;
        [ { opId : e.opId, startTime : e.startTime, endTime : e.endTime, numTuples : e.numTuples } |
            e <- entries,
            (minSpanLength > 0) => (e.endTime - e.startTime > minSpanLength),
            onlyRootOperator    => (e.opId == min [x.opId | x <- entries,
                x.fragmentId == fragmentId,
                x.queryId == queryId,
                x.subqueryId == subqueryId]),
            e.fragmentId == fragmentId,
            e.queryId == queryId,
            e.subqueryId == subqueryId,
            e.endTime > start,
            e.startTime < end ]
