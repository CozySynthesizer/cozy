Graph:

    type Node = { id : Int }
    type Edge = { src : Int, dst : Int }

    state nodes : Bag<Node>
    state edges : Bag<Edge>

    op addNode(n : nodes.Handle)
        nodes.add(n)

    op addEdge(e : edges.Handle)
        edges.add(e)

    query outgoing(nodeId : Int)
        [ e | e <- edges, e.val.src == nodeId ]

    query incoming(nodeId : Int)
        [ e | e <- edges, e.val.dst == nodeId ]

    query degree(nodeId : Int)
        sum [ 1 | e <- edges, e.val.src == nodeId or e.val.dst == nodeId ]

    query neighbors(n : Node)
        [ m | e <- edges, m <- nodes, e.val.src == n.id and e.val.dst == m.val.id ]
