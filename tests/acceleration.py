from collections import OrderedDict
import unittest

from cozy.common import OrderedSet
from cozy.target_syntax import *
from cozy.syntax_tools import pprint, alpha_equivalent, free_vars
from cozy.typecheck import retypecheck
from cozy.contexts import RootCtx, UnderBinder
from cozy.pools import Pool, RUNTIME_POOL
from cozy.synthesis.acceleration import try_optimize, map_accelerate
from cozy.solver import valid
from cozy.cost_model import CostModel, Order, debug_comparison

def can_improve(e, ctx, assumptions : Exp = T, pool : Pool = RUNTIME_POOL):
    print("Optimizing {}...".format(pprint(e)))
    cm = CostModel(assumptions=assumptions, funcs=ctx.funcs())
    for ee in try_optimize(e, ctx, pool):
        print(" --> trying {}...".format(pprint(ee)))
        if not valid(EImplies(assumptions, EEq(e, ee))):
            print("    INVALID")
            continue
        else:
            print("    VALID")
        order = cm.compare(ee, e, ctx, pool)
        if order == Order.LT:
            print("    IMPROVED")
            return True
        else:
            print("    NOT IMPROVED: order is {}".format(order))
            debug_comparison(cm, ee, e, ctx)
    return False

class TestAccelerationRules(unittest.TestCase):

    def test_map_accel_regression1(self):
        xs = EVar("xs").with_type(INT_BAG)
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        ctx = RootCtx(state_vars=[xs], args=[])
        e = EFilter(EStateVar(xs), ELambda(x, EEq(x, ONE)))
        assert retypecheck(e)
        assert ctx.legal_for(free_vars(e))
        results = []
        for ee, pool in map_accelerate(e, ctx):
            assert ctx.legal_for(free_vars(ee)), pprint(ee)
            if pool == RUNTIME_POOL:
                results.append(ee)

        expected = EMapGet(EStateVar(EMakeMap2(xs, ELambda(y, EFilter(xs, ELambda(x, EEq(x, y)))))), ONE)
        assert any(alpha_equivalent(ee, expected) for ee in results), "results = {}".format("; ".join(pprint(ee) for ee in results))

    def test_map_accel_regression2(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        pairs = EVar("pairs").with_type(TBag(TTuple((INT, INT))))
        xs = EVar("xs").with_type(INT_BAG)
        ctx = RootCtx(state_vars=[pairs, xs], args=[x])
        ctx = UnderBinder(ctx, y, EStateVar(xs).with_type(xs.type), RUNTIME_POOL)
        e = EIn(ETuple((x, y)), pairs)
        assert retypecheck(e)
        assert [res for res, pool in map_accelerate(e, ctx) if pool == RUNTIME_POOL and isinstance(res, EMapGet)]

    def test_argmin(self):
        xs = EVar("xs").with_type(INT_BAG)
        ys = EVar("ys").with_type(INT_BAG)
        x = EVar("x").with_type(INT)
        ctx = RootCtx(state_vars=[xs], args=[ys])
        e = EArgMin(EBinOp(ys, "+", EStateVar(xs).with_type(xs.type)).with_type(INT_BAG), ELambda(x, x)).with_type(INT)
        assert can_improve(e, ctx)

    def test_regression01(self):
        e = EUnaryOp('exists', EBinOp(EFilter(EStateVar(EFilter(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFilter(EMapGet(EStateVar(EMakeMap2(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_key85182').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EFilter(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('_key85182').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TMap(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TMap(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        ctx = RootCtx(state_vars=OrderedSet([EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))]), args=OrderedSet([EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))]), funcs=OrderedDict())
        assumptions = EBinOp(EBinOp(EBinOp(EUnaryOp('all', EMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBinOp(EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool()), 'and', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EBinOp(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '!=', EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '==', EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), '==', EGetField(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), '==', EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), '==', EGetField(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        assert can_improve(e, ctx, assumptions=assumptions)
