import os
import shutil
import subprocess
import tempfile
import unittest

from cozy.target_syntax import *
from cozy.syntax_tools import pprint, mk_lambda, fresh_var
from cozy.compile import CxxPrinter, JavaPrinter
from cozy.library import Library, TNativeList, TNativeMap, TNativeSet
from cozy.autotuning import enumerate_impls
from cozy.sharing import compute_sharing

class TestCodegen(unittest.TestCase):

    def test_regression1(self):
        PixMap = TNative("int")
        ByteArray = TNative("int")
        Enum = TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))
        Entry = THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', PixMap), ('indexData', ByteArray), ('memSize', TInt()), ('diskSize', TInt()), ('st', Enum), ('inUse', TBool()))))
        spec = Spec('TileCache', [('State', Enum), ('Key', TNative('uint64_t')), ('Entry', Entry)], [], [('_var406', TMap(TNative('uint64_t'), TBag(Entry)))], [], [Query('_name28', Visibility.Public, [('e', Entry)], (), EEmptyList().with_type(TBag(TNative('uint64_t')))), Query('_name261', Visibility.Public, [('e', Entry), ('_var251', TNative('uint64_t'))], (), EEmptyList().with_type(TBag(Entry))), Query('_name260', Visibility.Public, [('e', Entry)], (), ESingleton(EGetField(EGetField(EVar('e').with_type(Entry), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', PixMap), ('indexData', ByteArray), ('memSize', TInt()), ('diskSize', TInt()), ('st', Enum), ('inUse', TBool())))), 'key').with_type(TNative('uint64_t'))).with_type(TBag(TNative('uint64_t')))), Query('_name25', Visibility.Public, [('e', Entry)], (), EEmptyList().with_type(TBag(TNative('uint64_t')))), Query('_name33', Visibility.Public, [('e', Entry), ('_var19', TNative('uint64_t'))], (), ESingleton(EVar('e').with_type(Entry)).with_type(TBag(Entry))), Query('_name257', Visibility.Public, [('e', Entry)], (), EEmptyList().with_type(TBag(TNative('uint64_t')))), Query('_name266', Visibility.Public, [('e', Entry), ('_var251', TNative('uint64_t'))], (), EEmptyList().with_type(TBag(Entry))), Query('_name22', Visibility.Public, [('e', Entry)], (), ESingleton(EGetField(EGetField(EVar('e').with_type(Entry), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', PixMap), ('indexData', ByteArray), ('memSize', TInt()), ('diskSize', TInt()), ('st', Enum), ('inUse', TBool())))), 'key').with_type(TNative('uint64_t'))).with_type(TBag(TNative('uint64_t')))), Query('_name37', Visibility.Public, [('_var19', TNative('uint64_t')), ('e', Entry)], (), EEmptyList().with_type(TBag(Entry))), Query('_name29', Visibility.Public, [('e', Entry), ('_var19', TNative('uint64_t'))], (), ESingleton(EVar('e').with_type(Entry)).with_type(TBag(Entry))), Query('findTile', Visibility.Public, [('k', TNative('uint64_t'))], (), EUnaryOp('the', EMapGet(EVar('_var406').with_type(TMap(TNative('uint64_t'), TBag(Entry))), EVar('k').with_type(TNative('uint64_t'))).with_type(TBag(Entry))).with_type(TMaybe(Entry))), Query('_name270', Visibility.Public, [('_var251', TNative('uint64_t')), ('e', Entry)], (), EMapGet(EVar('_var406').with_type(TMap(TNative('uint64_t'), TBag(Entry))), EVar('_var251').with_type(TNative('uint64_t'))).with_type(TBag(Entry))), Op('add', [('e', Entry)], [], SSeq(SSeq(SForEach(EVar('_var19').with_type(TNative('uint64_t')), ECall('_name28', [EVar('e').with_type(Entry)]).with_type(TBag(TNative('uint64_t'))), SMapDel(EVar('_var406').with_type(TMap(TNative('uint64_t'), TBag(Entry))), EVar('_var19').with_type(TNative('uint64_t')))), SForEach(EVar('_var19').with_type(TNative('uint64_t')), ECall('_name22', [EVar('e').with_type(Entry)]).with_type(TBag(TNative('uint64_t'))), SMapPut(EVar('_var406').with_type(TMap(TNative('uint64_t'), TBag(Entry))), EVar('_var19').with_type(TNative('uint64_t')), ECall('_name29', [EVar('e').with_type(Entry), EVar('_var19').with_type(TNative('uint64_t'))]).with_type(TBag(Entry))))), SForEach(EVar('_var19').with_type(TNative('uint64_t')), ECall('_name25', [EVar('e').with_type(Entry)]).with_type(TBag(TNative('uint64_t'))), SMapUpdate(EVar('_var406').with_type(TMap(TNative('uint64_t'), TBag(Entry))), EVar('_var19').with_type(TNative('uint64_t')), EVar('_var38').with_type(TBag(Entry)), SSeq(SForEach(EVar('_var39').with_type(Entry), ECall('_name33', [EVar('e').with_type(Entry), EVar('_var19').with_type(TNative('uint64_t'))]).with_type(TBag(Entry)), SCall(EVar('_var38').with_type(TBag(Entry)), 'add', [EVar('_var39').with_type(Entry)])), SForEach(EVar('_var40').with_type(Entry), ECall('_name37', [EVar('_var19').with_type(TNative('uint64_t')), EVar('e').with_type(Entry)]).with_type(TBag(Entry)), SCall(EVar('_var38').with_type(TBag(Entry)), 'remove', [EVar('_var40').with_type(Entry)]))))))), Op('rm', [('e', Entry)], [], SSeq(SSeq(SForEach(EVar('_var251').with_type(TNative('uint64_t')), ECall('_name260', (EVar('e').with_type(Entry),)).with_type(TBag(TNative('uint64_t'))), SMapDel(EVar('_var406').with_type(TMap(TNative('uint64_t'), TBag(Entry))), EVar('_var251').with_type(TNative('uint64_t')))), SForEach(EVar('_var251').with_type(TNative('uint64_t')), ECall('_name28', (EVar('e').with_type(Entry),)).with_type(TBag(TNative('uint64_t'))), SMapPut(EVar('_var406').with_type(TMap(TNative('uint64_t'), TBag(Entry))), EVar('_var251').with_type(TNative('uint64_t')), ECall('_name261', (EVar('e').with_type(Entry), EVar('_var251').with_type(TNative('uint64_t')))).with_type(TBag(Entry))))), SForEach(EVar('_var251').with_type(TNative('uint64_t')), ECall('_name257', (EVar('e').with_type(Entry),)).with_type(TBag(TNative('uint64_t'))), SMapUpdate(EVar('_var406').with_type(TMap(TNative('uint64_t'), TBag(Entry))), EVar('_var251').with_type(TNative('uint64_t')), EVar('_var271').with_type(TBag(Entry)), SSeq(SForEach(EVar('_var272').with_type(Entry), ECall('_name266', (EVar('e').with_type(Entry), EVar('_var251').with_type(TNative('uint64_t')))).with_type(TBag(Entry)), SCall(EVar('_var271').with_type(TBag(Entry)), 'add', [EVar('_var272').with_type(Entry)])), SForEach(EVar('_var273').with_type(Entry), ECall('_name270', (EVar('_var251').with_type(TNative('uint64_t')), EVar('e').with_type(Entry))).with_type(TBag(Entry)), SCall(EVar('_var271').with_type(TBag(Entry)), 'remove', [EVar('_var273').with_type(Entry)])))))))])
        state_map = {'_var406': EMakeMap(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', PixMap), ('indexData', ByteArray), ('memSize', TInt()), ('diskSize', TInt()), ('st', Enum), ('inUse', TBool())))))), ELambda(EVar('_var19').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', PixMap), ('indexData', ByteArray), ('memSize', TInt()), ('diskSize', TInt()), ('st', Enum), ('inUse', TBool()))))), EGetField(EGetField(EVar('_var19').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', PixMap), ('indexData', ByteArray), ('memSize', TInt()), ('diskSize', TInt()), ('st', Enum), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', PixMap), ('indexData', ByteArray), ('memSize', TInt()), ('diskSize', TInt()), ('st', Enum), ('inUse', TBool())))), 'key').with_type(TNative('uint64_t'))), ELambda(EVar('_var20').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', PixMap), ('indexData', ByteArray), ('memSize', TInt()), ('diskSize', TInt()), ('st', Enum), ('inUse', TBool())))))), EVar('_var20').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', PixMap), ('indexData', ByteArray), ('memSize', TInt()), ('diskSize', TInt()), ('st', Enum), ('inUse', TBool())))))))).with_type(TMap(TNative('uint64_t'), TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', PixMap), ('indexData', ByteArray), ('memSize', TInt()), ('diskSize', TInt()), ('st', Enum), ('inUse', TBool())))))))}
        print(pprint(spec))
        lib = Library()
        impls = list(enumerate_impls(spec, lib))
        print("# impls: {}".format(len(impls)))
        dir = tempfile.mkdtemp()
        print("Writing impls to {}".format(dir))
        codegen = CxxPrinter()
        for i in range(len(impls)):
            impl = impls[i]
            filename = os.path.join(dir, "impl_{}.cxx".format(i))
            args = ["c++", "-std=c++11", "-c", filename, "-o", "/dev/null"]
            print("[impl {}] Running {}".format(i, " ".join(args)))

            share_info = compute_sharing(state_map, dict(impl.statevars))
            print(share_info)
            with open(filename, "w") as f:
                f.write(codegen.visit(impl, state_map, share_info))
            res = subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            print(res.stdout.decode("UTF-8"))
            print(res.stderr.decode("UTF-8"))
            assert res.returncode == 0
        shutil.rmtree(dir)

    def test_regression2(self):
        Constr = TNative('Object')
        PropagatableVector = TNative('Object')
        UndoVector = TNative('Object')
        Record = TRecord((('var', TInt()), ('level', TInt()), ('reason', Constr), ('posWatches', PropagatableVector), ('negWatches', PropagatableVector), ('undos', UndoVector)))
        spec = Spec('SynthesizedLitStorage', [('Constr', Constr), ('PropagatableVector', PropagatableVector), ('UndoVector', UndoVector), ('Record', THandle('Record', Record))], [], [('_var39861', TInt()), ('_var110', TNativeList(THandle('Record', Record))), ('_var1646', TNativeMap(TInt(), TNativeList(THandle('Record', Record))))], [], [Query('size', 'public', [], (), EUnaryOp('sum', ESingleton(EVar('_var39861').with_type(TInt())).with_type(TBag(TInt()))).with_type(TInt())), Query('_name111', 'internal', [('rec', THandle('Record', Record)), ('level', TInt())], (), EEmptyList().with_type(TBag(THandle('Record', Record)))), Query('_name184', 'internal', [('rec', THandle('Record', Record)), ('reason', Constr)], (), EEmptyList().with_type(TBag(THandle('Record', Record)))), Query('_name283', 'internal', [('rec', THandle('Record', Record))], (), ESingleton(EVar('rec').with_type(THandle('Record', Record))).with_type(TBag(THandle('Record', Record)))), Query('_name284', 'internal', [('rec', THandle('Record', Record))], (), EEmptyList().with_type(TBag(THandle('Record', Record)))), Query('_name415', 'internal', [('rec', THandle('Record', Record))], (), ESingleton(EVar('rec').with_type(THandle('Record', Record))).with_type(TBag(THandle('Record', Record)))), Query('find', 'public', [('varId', TInt())], (), EMapGet(EVar('_var1646').with_type(TNativeMap(TInt(), TNativeList(THandle('Record', Record)))), EVar('varId').with_type(TInt())).with_type(TNativeList(THandle('Record', Record)))), Query('find_1', 'public', [('varId', TInt())], (), EUnaryOp('the', EMapGet(EVar('_var1646').with_type(TNativeMap(TInt(), TNativeList(THandle('Record', Record)))), EVar('varId').with_type(TInt())).with_type(TNativeList(THandle('Record', Record)))).with_type(TMaybe(THandle('Record', Record)))), Query('_name1717', 'internal', [('_var1663', TInt()), ('rec', THandle('Record', Record)), ('level', TInt())], (), EBinOp(ECond(EBool(True).with_type(TBool()), EMap(EFilter(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), ELambda(EVar('_var1939').with_type(THandle('Record', Record)), EBool(False).with_type(TBool()))).with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var1939').with_type(THandle('Record', Record)), ECond(EBool(True).with_type(TBool()), EWithAlteredValue(EVar('_var1939').with_type(THandle('Record',
            Record)), EMakeRecord((('var', EGetField(EGetField(EVar('_var1939').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt())), ('level', EVar('level').with_type(TInt())), ('reason', EGetField(EGetField(EVar('_var1939').with_type(THandle('Record', Record)), 'val').with_type(Record), 'reason').with_type(Constr)), ('posWatches', EGetField(EGetField(EVar('_var1939').with_type(THandle('Record', Record)), 'val').with_type(Record), 'posWatches').with_type(PropagatableVector)), ('negWatches', EGetField(EGetField(EVar('_var1939').with_type(THandle('Record', Record)), 'val').with_type(Record), 'negWatches').with_type(PropagatableVector)), ('undos', EGetField(EGetField(EVar('_var1939').with_type(THandle('Record', Record)), 'val').with_type(Record), 'undos').with_type(UndoVector)))).with_type(Record)).with_type(THandle('Record', Record)), EVar('_var1939').with_type(THandle('Record', Record))).with_type(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record))), EEmptyList().with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record))), '-', ECond(EBool(True).with_type(TBool()), EFilter(EVar('_var110').with_type(TNativeList(THandle('Record', TRecord((('var', TInt()), ('level', TInt()), ('reason', Constr), ('posWatches',
                PropagatableVector), ('negWatches', PropagatableVector), ('undos', UndoVector)))))), ELambda(EVar('_var1939').with_type(THandle('Record', Record)), EBool(False).with_type(TBool()))).with_type(TBag(THandle('Record', Record))), EEmptyList().with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record)))), Query('_name1787', 'internal', [('rec', THandle('Record', Record)), ('level', TInt())], (), EFilter(EMap(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), ELambda(EVar('_var2478').with_type(THandle('Record', Record)), EGetField(EGetField(EVar('_var2478').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var2474').with_type(TInt()), EBool(False).with_type(TBool()))).with_type(TBag(TInt()))), Query('_name2506', 'internal', [('_var2458', TInt()), ('rec', THandle('Record', Record)), ('reason', Constr)], (), EBinOp(ECond(EBool(True).with_type(TBool()), EMap(EFilter(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), ELambda(EVar('_var2766').with_type(THandle('Record', Record)), EBool(False).with_type(TBool()))).with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var2766').with_type(THandle('Record', Record)), ECond(EBool(True).with_type(TBool()), EWithAlteredValue(EVar('_var2766').with_type(THandle('Record', Record)), EMakeRecord((('var', EGetField(EGetField(EVar('_var2766').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt())), ('level', EGetField(EGetField(EVar('_var2766').with_type(THandle('Record', Record)), 'val').with_type(Record), 'level').with_type(TInt())), ('reason', EVar('reason').with_type(Constr)), ('posWatches', EGetField(EGetField(EVar('_var2766').with_type(THandle('Record', Record)), 'val').with_type(Record), 'posWatches').with_type(PropagatableVector)), ('negWatches', EGetField(EGetField(EVar('_var2766').with_type(THandle('Record', Record)), 'val').with_type(Record), 'negWatches').with_type(PropagatableVector)), ('undos', EGetField(EGetField(EVar('_var2766').with_type(THandle('Record', Record)), 'val').with_type(
                    Record), 'undos').with_type(UndoVector)))).with_type(Record)).with_type(THandle('Record', Record)), EVar('_var2766').with_type(THandle('Record', Record))).with_type(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record))), EEmptyList().with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record))), '-', ECond(EBool(True).with_type(TBool()), EFilter(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), ELambda(EVar('_var2766').with_type(THandle('Record', Record)), EBool(False).with_type(TBool()))).with_type(TBag(THandle('Record', Record))), EEmptyList().with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record)))), Query('_name2598', 'internal', [('rec', THandle('Record', Record)), ('reason', Constr)], (), EFilter(EMap(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), ELambda(EVar('_var3429').with_type(THandle('Record', Record)), EGetField(EGetField(EVar('_var3429').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var3424').with_type(TInt()), EBool(False).with_type(TBool()))).with_type(TBag(TInt()))), Query('_name3433', 'internal', [('_var3416', TInt()), ('rec', THandle('Record', Record))], (), ESingleton(EVar('rec').with_type(THandle('Record', Record))).with_type(TBag(THandle('Record', Record)))), Query('_name3442', 'internal', [('_var3416', TInt()), ('rec', THandle('Record', Record))], (), EEmptyList().with_type(TBag(THandle('Record', Record)))), Query('_name3485', 'internal', [('rec', THandle('Record', Record))], (), EMap(ESingleton(EVar('rec').with_type(THandle('Record', TRecord((('var', TInt()), ('level', TInt()), ('reason', Constr), ('posWatches', PropagatableVector), ('negWatches', PropagatableVector), ('undos',
            UndoVector)))))).with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var5075').with_type(THandle('Record', Record)), EGetField(EGetField(EVar('_var5075').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()))).with_type(TBag(TInt()))), Query('_name4987', 'internal', [('_var4978', TInt()), ('rec', THandle('Record', Record))], (), EEmptyList().with_type(TBag(THandle('Record', Record)))), Query('_name4996', 'internal', [('_var4978', TInt()), ('rec', THandle('Record', Record))], (), ESingleton(EVar('rec').with_type(THandle('Record', Record))).with_type(TBag(THandle('Record', Record)))), Query('_name5015', 'internal', [('rec', THandle('Record', Record))], (), EFilter(EUnaryOp('distinct', EBinOp(EUnaryOp('distinct', EMap(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), ELambda(EVar('_var8932').with_type(THandle('Record', Record)), EGetField(EGetField(EVar('_var8932').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()))).with_type(TBag(TInt()))).with_type(TBag(TInt())), '+', EUnaryOp('distinct', EMap(EBinOp(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), '-', ESingleton(EVar('rec').with_type(THandle('Record', Record))).with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var8932').with_type(THandle('Record', Record)), ENum(0).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var8928').with_type(TInt()), EUnaryOp('not', EBinOp(ECond(EBool(True).with_type(TBool()), EFilter(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), ELambda(EVar('_var8932').with_type(THandle('Record', Record)), EBinOp(EGetField(EGetField(EVar('_var8932').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()), '==', EVar('_var8928').with_type(TInt())).with_type(TBool()))).with_type(TBag(THandle('Record', Record))), EEmptyList().with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', TRecord((('var', TInt()), ('level', TInt()), ('reason', Constr), ('posWatches', PropagatableVector), ('negWatches', PropagatableVector), ('undos',
                UndoVector)))))), '==', ECond(EBinOp(EVar('_var8928').with_type(TInt()), 'in', EMap(EBinOp(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), '-', ESingleton(EVar('rec').with_type(THandle('Record', Record))).with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var8932').with_type(THandle('Record', Record)), EGetField(EGetField(EVar('_var8932').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()))).with_type(TBag(TInt()))).with_type(TBool()), EFilter(EBinOp(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), '-', ESingleton(EVar('rec').with_type(THandle('Record', Record))).with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var8932').with_type(THandle('Record', Record)), EBinOp(EGetField(EGetField(EVar('_var8932').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()), '==', EVar('_var8928').with_type(TInt())).with_type(TBool()))).with_type(TBag(THandle('Record', Record))), EEmptyList().with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record)))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TInt()))), Query('_name39905', 'internal', [], (), ENum(0).with_type(TInt())), Query('_name40854', 'internal', [('rec', THandle('Record', Record))], (),
            EBinOp(EBinOp(EUnaryOp('sum', EMap(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), ELambda(EVar('_var40894').with_type(THandle('Record', Record)), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '+', EUnaryOp('sum', EMap(ESingleton(EVar('rec').with_type(THandle('Record', Record))).with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var40894').with_type(THandle('Record', Record)), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt())).with_type(TInt()), '+', EUnaryOp('-', EUnaryOp('sum', EMap(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), ELambda(EVar('_var40894').with_type(THandle('Record', Record)), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt())).with_type(TInt())).with_type(TInt())), Query('_name40876', 'internal', [('rec', THandle('Record', Record))], (), EBinOp(EUnaryOp('sum', EMap(EBinOp(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), '-', ESingleton(EVar('rec').with_type(THandle('Record', Record))).with_type(TBag(THandle('Record', Record)))).with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var1000').with_type(THandle('Record', Record)), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt()), '+', EUnaryOp('-', EUnaryOp('sum', EMap(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), ELambda(EVar('_var1000').with_type(THandle('Record', Record)), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt())).with_type(TInt())).with_type(TInt())), Op('updateLevel', [('rec', THandle('Record', Record)), ('level', TInt())], [], SSeq(SSeq(SSeq(SSeq(SForEach(EVar('_var113').with_type(THandle('Record', Record)), ECall('_name111', (EVar('rec').with_type(THandle('Record', Record)), EVar('level').with_type(TInt()))).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), 'remove', [EVar('_var113').with_type(THandle('Record', Record))])), SForEach(EVar('_var113').with_type(THandle('Record', Record)), ECall('_name111', (EVar('rec').with_type(THandle('Record', Record)), EVar('level').with_type(TInt()))).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), 'add', [EVar('_var113').with_type(THandle('Record', TRecord((('var', TInt()), ('level', TInt()), ('reason', Constr), ('posWatches',
                PropagatableVector), ('negWatches', PropagatableVector), ('undos', UndoVector)))))]))), SForEach(EVar('_var1663').with_type(TInt()), ECall('_name1787', (EVar('rec').with_type(THandle('Record', Record)), EVar('level').with_type(TInt()))).with_type(TBag(TInt())), SMapUpdate(EVar('_var1646').with_type(TNativeMap(TInt(), TNativeList(THandle('Record', Record)))), EVar('_var1663').with_type(TInt()), EVar('_var1664').with_type(TNativeList(THandle('Record', Record))), SSeq(SForEach(EVar('_var1739').with_type(THandle('Record', Record)), ECall('_name1717', (EVar('_var1663').with_type(TInt()), EVar('rec').with_type(THandle('Record', Record)), EVar('level').with_type(TInt()))).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var1664').with_type(TNativeList(THandle('Record', Record))), 'remove', [EVar('_var1739').with_type(THandle('Record', Record))])), SForEach(EVar('_var1739').with_type(THandle('Record', Record)), ECall('_name1717', (EVar('_var1663').with_type(TInt()), EVar('rec').with_type(THandle('Record', Record)),
            EVar('level').with_type(TInt()))).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var1664').with_type(TNativeList(THandle('Record', Record))), 'add', [EVar('_var1739').with_type(THandle('Record', Record))])))))), SAssign(EVar('_var39861').with_type(TInt()), EBinOp(EVar('_var39861').with_type(TInt()), '+', ECall('_name39905', []).with_type(TInt())).with_type(TInt()))), SSeq(SSeq(SSeq(SSeq(SSeq(SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()), EBinOp(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()), '+', EBinOp(ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt())).with_type(TInt()), '+', EUnaryOp('-', EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt())).with_type(TInt())).with_type(TInt())).with_type(TInt())), SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'level').with_type(TInt()), EBinOp(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'level').with_type(TInt()), '+', EBinOp(ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EVar('level').with_type(TInt()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'level').with_type(TInt())).with_type(TInt()), '+', EUnaryOp('-', EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'level').with_type(TInt())).with_type(TInt())).with_type(TInt())).with_type(TInt()))), SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', TRecord((('var', TInt()), ('level', TInt()), ('reason', Constr), ('posWatches', PropagatableVector), ('negWatches', PropagatableVector), ('undos',
                UndoVector))))), 'val').with_type(Record), 'reason').with_type(Constr), ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'reason').with_type(Constr), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'reason').with_type(Constr)).with_type(Constr))), SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'posWatches').with_type(PropagatableVector), ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'posWatches').with_type(PropagatableVector), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'posWatches').with_type(PropagatableVector)).with_type(PropagatableVector))), SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'negWatches').with_type(PropagatableVector), ECond(EBinOp(EVar('rec').with_type(THandle('Record', TRecord((('var', TInt()), ('level', TInt()), ('reason', Constr), ('posWatches', PropagatableVector), ('negWatches', PropagatableVector), ('undos',
                    UndoVector))))), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'negWatches').with_type(PropagatableVector), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'negWatches').with_type(PropagatableVector)).with_type(PropagatableVector))), SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'undos').with_type(UndoVector), ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'undos').with_type(UndoVector), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'undos').with_type(UndoVector)).with_type(UndoVector))))), Op('updateReason', [('rec', THandle('Record', Record)), ('reason', Constr)], [], SSeq(SSeq(SSeq(SSeq(SForEach(EVar('_var186').with_type(THandle('Record', Record)), ECall('_name184', (EVar('rec').with_type(THandle('Record', Record)), EVar('reason').with_type(Constr))).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), 'remove', [EVar('_var186').with_type(THandle('Record', Record))])), SForEach(EVar('_var186').with_type(THandle('Record', Record)), ECall('_name184', (EVar('rec').with_type(THandle('Record', Record)), EVar('reason').with_type(Constr))).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), 'add', [EVar('_var186').with_type(THandle('Record', Record))]))), SForEach(EVar('_var2458').with_type(TInt()), ECall('_name2598', (EVar('rec').with_type(THandle('Record', Record)), EVar('reason').with_type(Constr))).with_type(TBag(TInt())), SMapUpdate(EVar('_var1646').with_type(TNativeMap(TInt(),
            TNativeList(THandle('Record', Record)))), EVar('_var2458').with_type(TInt()), EVar('_var2459').with_type(TNativeList(THandle('Record', Record))), SSeq(SForEach(EVar('_var2535').with_type(THandle('Record', Record)), ECall('_name2506', (EVar('_var2458').with_type(TInt()), EVar('rec').with_type(THandle('Record', Record)), EVar('reason').with_type(Constr))).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var2459').with_type(TNativeList(THandle('Record', Record))), 'remove', [EVar('_var2535').with_type(THandle('Record', Record))])), SForEach(EVar('_var2535').with_type(THandle('Record', Record)), ECall('_name2506', (EVar('_var2458').with_type(TInt()), EVar('rec').with_type(THandle('Record', Record)), EVar('reason').with_type(Constr))).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var2459').with_type(TNativeList(THandle('Record', Record))), 'add', [EVar('_var2535').with_type(THandle('Record', Record))])))))), SAssign(EVar('_var39861').with_type(TInt()), EBinOp(EVar('_var39861').with_type(TInt()), '+', ECall('_name39905', ()).with_type(TInt())).with_type(TInt()))), SSeq(SSeq(SSeq(SSeq(SSeq(SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()), EBinOp(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()), '+', EBinOp(ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt())).with_type(TInt()), '+', EUnaryOp('-', EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt())).with_type(TInt())).with_type(TInt())).with_type(TInt())), SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', TRecord((('var', TInt()), ('level', TInt()), ('reason', Constr), ('posWatches', PropagatableVector), ('negWatches', PropagatableVector), ('undos',
                UndoVector))))), 'val').with_type(Record), 'level').with_type(TInt()), EBinOp(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'level').with_type(TInt()), '+', EBinOp(ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'level').with_type(TInt()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'level').with_type(TInt())).with_type(TInt()), '+', EUnaryOp('-', EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'level').with_type(TInt())).with_type(TInt())).with_type(TInt())).with_type(TInt()))), SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'reason').with_type(Constr), ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EVar('reason').with_type(Constr), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'reason').with_type(Constr)).with_type(Constr))), SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'posWatches').with_type(PropagatableVector), ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'posWatches').with_type(PropagatableVector), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'posWatches').with_type(PropagatableVector)).with_type(PropagatableVector))), SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', TRecord((('var', TInt()), ('level', TInt()), ('reason', Constr), ('posWatches', PropagatableVector), ('negWatches', PropagatableVector),
            ('undos', UndoVector))))), 'val').with_type(Record), 'negWatches').with_type(PropagatableVector), ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'negWatches').with_type(PropagatableVector), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'negWatches').with_type(PropagatableVector)).with_type(PropagatableVector))), SAssign(EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'undos').with_type(UndoVector), ECond(EBinOp(EVar('rec').with_type(THandle('Record', Record)), '==', EVar('rec').with_type(THandle('Record', Record))).with_type(TBool()), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'undos').with_type(UndoVector), EGetField(EGetField(EVar('rec').with_type(THandle('Record', Record)), 'val').with_type(Record), 'undos').with_type(UndoVector)).with_type(UndoVector))))), Op('add', [('rec', THandle('Record', Record))], [], SSeq(SSeq(SSeq(SForEach(EVar('_var285').with_type(THandle('Record', Record)), ECall('_name284', [EVar('rec').with_type(THandle('Record', TRecord((('var', TInt()),
                ('level', TInt()), ('reason', Constr), ('posWatches', PropagatableVector), ('negWatches', PropagatableVector), ('undos', UndoVector)))))]).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), 'remove', [EVar('_var285').with_type(THandle('Record', Record))])), SForEach(EVar('_var285').with_type(THandle('Record', Record)), ECall('_name283', [EVar('rec').with_type(THandle('Record', Record))]).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), 'add', [EVar('_var285').with_type(THandle('Record', Record))]))), SForEach(EVar('_var3416').with_type(TInt()), ECall('_name3485', [EVar('rec').with_type(THandle('Record', Record))]).with_type(TBag(TInt())), SMapUpdate(EVar('_var1646').with_type(TNativeMap(TInt(), TNativeList(THandle('Record', Record)))), EVar('_var3416').with_type(TInt()), EVar('_var3417').with_type(TNativeList(THandle('Record', Record))), SSeq(SForEach(EVar('_var3449').with_type(THandle('Record', Record)), ECall('_name3442', [EVar('_var3416').with_type(TInt()), EVar('rec').with_type(THandle('Record', Record))]).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var3417').with_type(TNativeList(THandle('Record', Record))), 'remove', [EVar('_var3449').with_type(THandle('Record', Record))])), SForEach(EVar('_var3449').with_type(THandle('Record', Record)), ECall('_name3433', [EVar('_var3416').with_type(TInt()), EVar('rec').with_type(THandle('Record', Record))]).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var3417').with_type(TNativeList(THandle('Record', Record))), 'add', [EVar('_var3449').with_type(THandle('Record', Record))])))))), SAssign(EVar('_var39861').with_type(TInt()), EBinOp(EVar('_var39861').with_type(TInt()), '+', ECall('_name40854', [EVar('rec').with_type(THandle('Record', Record))]).with_type(TInt())).with_type(TInt())))), Op('remove', [('rec', THandle('Record', Record))], [], SSeq(SSeq(SSeq(SForEach(EVar('_var416').with_type(THandle('Record', Record)), ECall('_name415', (EVar('rec').with_type(THandle('Record', Record)),)).with_type(TBag(THandle('Record', TRecord((('var', TInt()), ('level', TInt()), ('reason', Constr), ('posWatches', PropagatableVector),
                ('negWatches', PropagatableVector), ('undos', UndoVector)))))), SCall(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), 'remove', [EVar('_var416').with_type(THandle('Record', Record))])), SForEach(EVar('_var416').with_type(THandle('Record', Record)), ECall('_name284', (EVar('rec').with_type(THandle('Record', Record)),)).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var110').with_type(TNativeList(THandle('Record', Record))), 'add', [EVar('_var416').with_type(THandle('Record', Record))]))), SForEach(EVar('_var4978').with_type(TInt()), ECall('_name5015', [EVar('rec').with_type(THandle('Record', Record))]).with_type(TBag(TInt())), SMapUpdate(EVar('_var1646').with_type(TNativeMap(TInt(), TNativeList(THandle('Record', Record)))), EVar('_var4978').with_type(TInt()), EVar('_var4979').with_type(TNativeList(THandle('Record', Record))), SSeq(SForEach(EVar('_var5002').with_type(THandle('Record', Record)), ECall('_name4996', [EVar('_var4978').with_type(TInt()), EVar('rec').with_type(THandle('Record', Record))]).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var4979').with_type(TNativeList(THandle('Record', Record))), 'remove', [EVar('_var5002').with_type(THandle('Record', Record))])), SForEach(EVar('_var5002').with_type(THandle('Record', Record)), ECall('_name4987', [EVar('_var4978').with_type(TInt()), EVar('rec').with_type(THandle('Record', Record))]).with_type(TBag(THandle('Record', Record))), SCall(EVar('_var4979').with_type(TNativeList(THandle('Record', Record))), 'add', [EVar('_var5002').with_type(THandle('Record', Record))])))))), SAssign(EVar('_var39861').with_type(TInt()), EBinOp(EVar('_var39861').with_type(TInt()), '+', ECall('_name40876', [EVar('rec').with_type(THandle('Record', Record))]).with_type(TInt())).with_type(TInt()))))])
        state_map = {'_var110': EVar('records').with_type(TBag(THandle('Record', Record))), '_var1646': EMakeMap2(EMap(EVar('records').with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var1020').with_type(THandle('Record', Record)), EGetField(EGetField(EVar('_var1020').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var1016').with_type(TInt()), EFilter(EVar('records').with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var1020').with_type(THandle('Record', Record)), EBinOp(EGetField(EGetField(EVar('_var1020').with_type(THandle('Record', Record)), 'val').with_type(Record), 'var').with_type(TInt()), '==', EVar('_var1016').with_type(TInt())).with_type(TBool()))).with_type(TBag(THandle('Record', Record))))).with_type(TMap(TInt(), TBag(THandle('Record', Record)))), '_var39861': EUnaryOp('sum', EMap(EVar('records').with_type(TBag(THandle('Record', Record))), ELambda(EVar('_var1000').with_type(THandle('Record', Record)), ENum(1).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TInt())}
        lib = Library()
        impls = list(enumerate_impls(spec, lib))
        print("# impls: {}".format(len(impls)))
        dir = tempfile.mkdtemp()
        print("Writing impls to {}".format(dir))
        codegen = JavaPrinter()
        for i in range(len(impls)):
            impl = impls[i]
            dir_i = os.path.join(dir, str(i))
            os.mkdir(dir_i)
            filename = os.path.join(dir_i, "{}.java".format(spec.name))
            args = ["javac", filename]
            print("[impl {}] Running {}".format(i, " ".join(args)))

            share_info = compute_sharing(state_map, dict(impl.statevars))
            print(share_info)
            with open(filename, "w") as f:
                f.write(codegen.visit(impl, state_map, share_info))
            res = subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            print(res.stdout.decode("UTF-8"))
            print(res.stderr.decode("UTF-8"))
            assert res.returncode == 0
        shutil.rmtree(dir)

    def test_construct_concrete_list(self):
        for codgen in (CxxPrinter(), JavaPrinter()):
            bag = EFilter(EVar("v").with_type(TBag(INT)), mk_lambda(INT, lambda x: EBinOp(x, ">", ZERO))).with_type(TBag(INT))
            stm = codgen.construct_concrete(TNativeList(INT), bag, EVar("out").with_type(TNativeList(INT)))
            print(codgen.visit(stm, indent=""))

    def test_construct_concrete_map(self):
        for codgen in (CxxPrinter(), JavaPrinter()):
            bag = EFilter(EVar("v").with_type(TBag(INT)), mk_lambda(INT, lambda x: EBinOp(x, ">", ZERO))).with_type(TBag(INT))
            map = EMakeMap2(bag, mk_lambda(INT, lambda k: k)).with_type(TMap(INT, INT))
            stm = codgen.construct_concrete(TNativeMap(INT, INT), map, EVar("out").with_type(TNativeMap(INT, INT)))
            print(codgen.visit(stm, indent=""))

    def test_distinct_foreach(self):
        for codgen in (CxxPrinter(), JavaPrinter()):
            bag = EFilter(EVar("v").with_type(TBag(INT)), mk_lambda(INT, lambda x: EBinOp(x, ">", ZERO))).with_type(TBag(INT))
            x = fresh_var(INT)
            v = fresh_var(INT)
            stm = SForEach(x, EUnaryOp(UOp.Distinct, bag).with_type(TSet(INT)), SAssign(v, x))
            print(codgen.visit(stm, indent=""))

    def test_distinct(self):
        for codgen in (CxxPrinter(), JavaPrinter()):
            bag = EFilter(EVar("v").with_type(TBag(INT)), mk_lambda(INT, lambda x: EBinOp(x, ">", ZERO))).with_type(TBag(INT))
            code, res = codgen.visit(EUnaryOp(UOp.Distinct, bag).with_type(TNativeSet(INT)), indent="")
            print(code)
            print("return {}".format(res))
