import unittest
import itertools

from cozy.cost_model import Cost, CompositeCostModel, debug_comparison, cardinality_le
from cozy.typecheck import INT, retypecheck
from cozy.target_syntax import *
from cozy.syntax_tools import equal, implies, pprint, fresh_var, mk_lambda, replace, subst
from cozy.solver import valid
from cozy.rep_inference import pprint_reps, infer_rep
from cozy.pools import RUNTIME_POOL

cm = CompositeCostModel()
def cost_of(e):
    return cm.cost(e, RUNTIME_POOL)

INVERT = {
    Cost.BETTER: Cost.WORSE,
    Cost.WORSE: Cost.BETTER,
    Cost.UNORDERED: Cost.UNORDERED }

def _assert_cmp(e1, c1, e2, c2, cmp):
    c = c1.compare_to(c2)
    if c != cmp:
        debug_comparison(e1, c1, e2, c2)
        assert c == cmp, "expected {}, but was {}".format(cmp, c)

def assert_cmp(e1, c1, e2, c2, cmp):
    _assert_cmp(e1, c1, e2, c2, cmp)
    _assert_cmp(e2, c2, e1, c1, INVERT[cmp])

class TestCostModel(unittest.TestCase):

    def test_map_vs_filter(self):
        # e1 = Filter {(\_var11 : xs.Handle -> ((_var11).val == z))} ((xs + []))
        xs = EVar("xs").with_type(TBag(INT))
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        z = EVar("z").with_type(INT)
        e1 = EFilter(EBinOp(xs, "+", EEmptyList().with_type(xs.type)),
            ELambda(x, equal(x, z)))
        e2 = EMapGet(
            EStateVar(EMakeMap2(xs,
                ELambda(x, EFilter(xs, ELambda(y, EEq(y, x)))))),
            z)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert valid(equal(e1, e2))

        c1 = cost_of(e1)
        c2 = cost_of(e2)
        print(c1.compare_to(c2))
        assert c1.always_worse_than(c2), "{} @ {} > {} @ {}".format(pprint(e1), c1, pprint(e2), c2)

    def test_map_vs_const_filter(self):
        # e1 = Filter {(\_var11 : xs.Handle -> ((_var11).val == z))} ((xs + []))
        xs = EVar("xs").with_type(TBag(INT))
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        e1 = EFilter(xs, ELambda(x, equal(x, ZERO)))
        e2 = EMapGet(
            EMakeMap2(xs,
                ELambda(x, EFilter(xs, ELambda(y, EEq(y, x))))),
            ZERO)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert valid(equal(e1, e2))

        c1 = cost_of(e1)
        c2 = cost_of(e2)
        assert c1.always_better_than(c2), "{} @ {} > {} @ {}".format(pprint(e1), c1, pprint(e2), c2)

    def test_true_filter(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        e1 = ESingleton(x)
        e2 = EFilter(e1, ELambda(y, T))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert cost_of(e1).compare_to(cost_of(e2)) == Cost.BETTER
        assert cost_of(e2).compare_to(cost_of(e1)) == Cost.WORSE

    def test_map_true_filter(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        f = ELambda(y, ZERO)
        e1 = ESingleton(x)
        e2 = EFilter(e1, ELambda(y, T))
        e1 = EMap(e1, f)
        e2 = EMap(e2, f)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert cost_of(e1).compare_to(cost_of(e2)) == Cost.BETTER
        assert cost_of(e2).compare_to(cost_of(e1)) == Cost.WORSE

    def test_eq_true_filter(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        f = ELambda(y, ZERO)
        e1 = ESingleton(x)
        e2 = EFilter(e1, ELambda(y, T))
        e1 = EEq(e1, e1)
        e2 = EEq(e2, e2)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert cost_of(e1).compare_to(cost_of(e2)) == Cost.BETTER
        assert cost_of(e2).compare_to(cost_of(e1)) == Cost.WORSE

    def test_eq_true_filter_in_filter(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        f = ELambda(y, ZERO)
        e1 = ESingleton(x)
        e2 = EFilter(e1, ELambda(y, T))
        e1 = EEq(e1, e1)
        e2 = EEq(e2, e2)
        e1 = EFilter(ESingleton(x), ELambda(y, e1))
        e2 = EFilter(ESingleton(x), ELambda(y, e2))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert cost_of(e1).compare_to(cost_of(e2)) == Cost.BETTER
        assert cost_of(e2).compare_to(cost_of(e1)) == Cost.WORSE

    def test_basics(self):
        ys = EVar('ys').with_type(TBag(THandle('ys', TInt())))
        e = EBinOp(EUnaryOp('sum', EFlatMap(EBinOp(ys, '+', EEmptyList().with_type(TBag(THandle('ys', TInt())))).with_type(TBag(THandle('ys', TInt()))), ELambda(EVar('_var12').with_type(THandle('ys', TInt())), ESingleton(ENum(1).with_type(TInt())).with_type(TBag(TInt())))).with_type(TBag(TInt()))).with_type(TInt()), '==', ENum(0).with_type(TInt())).with_type(TBool())
        assert cost_of(e).always_worse_than(Cost.ZERO)

    def test_add_empty(self):
        ys = EVar('ys').with_type(TBag(THandle('ys', TInt())))
        e1 = ys
        e2 = EBinOp(ys, "+", EEmptyList().with_type(ys.type))
        assert retypecheck(e1)
        assert retypecheck(e2)

        from cozy.rep_inference import infer_rep
        for ex in [e1, e2]:
            print("="*50 + " " + pprint(ex))
            for (st, e) in infer_rep([ys], ex):
                for (v, p) in st:
                    print("  {} : {} = {}".format(v.id, pprint(v.type), pprint(p)))
                print("  return {} : {}".format(pprint(e), pprint(e.type)))

        print("_" * 80)
        assert cost_of(e1).always_better_than(cost_of(e2)), "{} vs {}".format(cost_of(e1), cost_of(e2))

    def test_sum_empty(self):
        e1 = ENum(0).with_type(TInt())
        e2 = EUnaryOp("sum", EEmptyList().with_type(TBag(TInt()))).with_type(TInt())
        assert cost_of(e1).always_better_than(cost_of(e2)), "{} vs {}".format(cost_of(e1), cost_of(e2))

    def test_identity_map(self):
        xs = EVar("xs").with_type(TBag(INT))
        e1 = xs
        e2 = EMap(xs, mk_lambda(INT, lambda x: x))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert valid(equal(e1, e2))
        cost1 = cost_of(e1)
        cost2 = cost_of(e2)
        assert cost1.always_better_than(cost2), "{} vs {}".format(cost1, cost2)

    def test_tuples(self):
        sv = EVar("sv").with_type(THandle("T", INT))
        x = EVar("x").with_type(sv.type)
        e = ETupleGet(ETuple((sv, x)), 1)
        assert retypecheck(e)
        assert cost_of(e).always_worse_than(cost_of(x)), "cost of {} = {}, cost of {} = {}".format(pprint(e), cost_of(e), pprint(x), cost_of(x))

    def test_pointless_filter(self):
        Enum = TEnum(("A", "B", "C"))
        A, B, C = [EEnumEntry(case).with_type(Enum) for case in Enum.cases]
        Type = THandle("T", TRecord((("st", Enum),)))
        entries = EVar("xs").with_type(TBag(Type))
        entry = ESingleton(EVar("q").with_type(Type))
        zero = ENum(0).with_type(INT)
        one = ENum(1).with_type(INT)
        zero_the_hard_way = EUnaryOp(UOp.Sum, EMap(EFilter(entries, mk_lambda(Type, lambda x: F)), mk_lambda(Type, lambda x: one)))
        x = EVar("x").with_type(Type)
        p1 = EBinOp(equal(EGetField(EGetField(x, "val"), "st"), A), BOp.Or, equal(EGetField(EGetField(x, "val"), "st"), B))
        p2 = EBinOp(equal(zero, zero_the_hard_way), BOp.And, p1)
        e1 = EFilter(entry, ELambda(x, p1))
        e2 = EFilter(entry, ELambda(x, p2))
        assert retypecheck(e1), pprint(e1)
        assert retypecheck(e2), pprint(e2)
        assert valid(equal(e1, e2))
        assert cost_of(p1).always_better_than(cost_of(p2)), "cost_of(p1) == {}; cost_of(p2) == {}".format(cost_of(p1), cost_of(p2))
        assert cost_of(e1).always_better_than(cost_of(e2)), "cost_of(e1) == {}; cost_of(e2) == {}".format(cost_of(e1), cost_of(e2))

    def test_flatmap(self):
        costmodel = CompositeCostModel()
        t = THandle("T", INT)
        x = EVar("x").with_type(t)
        y = EVar("y").with_type(t)
        z = EVar("z").with_type(t)
        filt = EFilter(ESingleton(x), mk_lambda(t, lambda _: EEq(y, z)))
        e1 = EMap(filt, mk_lambda(t, lambda v: EWithAlteredValue(v, ZERO)))
        e2 = EFlatMap(filt, mk_lambda(t, lambda w: subst(e1, {x.id:w})))
        assert retypecheck(e1)
        assert retypecheck(e2)
        cost1 = costmodel.cost(e1, RUNTIME_POOL)
        cost2 = costmodel.cost(e2, RUNTIME_POOL)
        if not (cost1.always_better_than(cost2)):
            print("cost( {} ) = {}".format(pprint(e1), cost1))
            print("cost( {} ) = {}".format(pprint(e2), cost2))
            assert False

    def test_filter_singleton(self):
        x = EVar("x").with_type(INT)
        xs = EVar("xs").with_type(TBag(INT))
        e1 = EMap(EFilter(ESingleton(x), ELambda(x, EEq(x, ZERO))), ELambda(x, ONE))
        e2 = EMap(EFilter(EStateVar(xs), ELambda(x, EEq(x, ZERO))), ELambda(x, ONE))
        assert retypecheck(e1)
        assert retypecheck(e2)
        cost1 = cost_of(e1)
        cost2 = cost_of(e2)
        print("cost( {} ) = {}".format(pprint(e1), cost1))
        print("cost( {} ) = {}".format(pprint(e2), cost2))
        assumptions = EIn(x, xs)

        for x1, x2 in (("cost1", "cost2"), ("cost2", "cost1")):
            for f in ("always_better_than", "always_worse_than", "sometimes_better_than", "sometimes_worse_than"):
                print("@> {}.{}({}) = {}\n".format(x1, f, x2, getattr(locals()[x1], f)(locals()[x2], assumptions)))

        for op in "==", "<", "<=", ">", ">=":
            print("-"*10)
            print("cost1 {} cost2 = {}".format(op, cost1.always(op, cost2, T)))
            print("-"*10)

        ordering1 = cost1.compare_to(cost2, assumptions=assumptions)
        ordering2 = cost2.compare_to(cost1, assumptions=assumptions)
        print("cost1.compare_to(cost2) = {}".format(ordering1))
        print("cost2.compare_to(cost1) = {}".format(ordering2))

        assert ordering1 == "better"
        assert ordering2 == "worse"

    def test_regression1(self):
        e1 = EFilter(EUnaryOp('distinct', EBinOp(EUnaryOp('distinct', EMap(ESingleton(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EGetField(EGetField(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'inUse').with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool())), '+', EMap(ESingleton(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), ECond(EBinOp(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), '==', EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TBool()), EVar('inUse').with_type(TBool()), EGetField(EGetField(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'inUse').with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool())), ELambda(EVar('_var156894').with_type(TBool()), EBinOp(EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('DiskAndMemory').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()), 'or', EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('MemoryOnly').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))
        e2 = EFilter(EUnaryOp('distinct', EBinOp(EUnaryOp('distinct', EMap(EFilter(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('DiskAndMemory').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()), 'or', EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('MemoryOnly').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EGetField(EGetField(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'inUse').with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool())), '+', EMap(EFilter(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('DiskAndMemory').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()), 'or', EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('MemoryOnly').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), ECond(EBinOp(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), '==', EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TBool()), EVar('inUse').with_type(TBool()), EGetField(EGetField(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'inUse').with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool())), ELambda(EVar('_var156894').with_type(TBool()), EBinOp(EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('DiskAndMemory').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()), 'or', EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('MemoryOnly').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))
        c1 = cost_of(e1)
        c2 = cost_of(e2)
        assert_cmp(e1, c1, e2, c2, Cost.BETTER)

    def check_transitive(self, e1, e2, e3):
        for (e1, e2, e3) in itertools.permutations([e1, e2, e3]):
            c1 = cost_of(e1)
            c2 = cost_of(e2)
            c3 = cost_of(e3)
            if c1.compare_to(c2) == Cost.WORSE and c2.compare_to(c3) == Cost.WORSE:
                debug_comparison(e1, c1, e2, c2)
                debug_comparison(e2, c2, e3, c3)
                debug_comparison(e1, c1, e3, c3)
                cmp = c1.compare_to(c3)
                assert cmp == Cost.WORSE, cmp

    def test_regression2(self):
        e1 = EBinOp(EMap(EFlatMap(EStateVar(EUnaryOp('distinct', EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var111656').with_type(TNative('HostAndPort')), EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), '-', ESingleton(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))
        e2 = EBinOp(EMap(EFlatMap(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EStateVar(EUnaryOp('distinct', EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var111656').with_type(TNative('HostAndPort')), EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), '-', ESingleton(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))
        e3 = EBinOp(EMap(EBinOp(EFlatMap(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), '-', EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), '-', ESingleton(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))
        self.check_transitive(e1, e2, e3)

    def test_regression3(self):
        t = THandle("foo", INT)
        x = EVar("x").with_type(t)
        xs = EVar("xs").with_type(TBag(t))
        e1 = EBinOp(ESingleton(EGetField(x, "val")), "-", EStateVar(EMap(xs, mk_lambda(t, lambda x: EGetField(x, "val")))))
        assert retypecheck(e1)
        e2 = subst(e1, { xs.id: EBinOp(xs, "+", xs).with_type(xs.type) })
        assert cost_of(e1).compare_to(cost_of(e2)) == Cost.BETTER
        assert cost_of(e2).compare_to(cost_of(e1)) == Cost.WORSE

    def test_regression4(self):
        t = THandle("foo", INT)
        x = EVar("x").with_type(t)
        xs = EVar("xs").with_type(TBag(t))
        e1 = EStateVar(EMap(xs, mk_lambda(t, lambda x: EGetField(x, "val"))))
        assert retypecheck(e1)
        e2 = subst(e1, { xs.id: EBinOp(xs, "+", xs).with_type(xs.type) })
        assert e1 != e2
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression5(self):
        xs = EVar("xs").with_type(INT_BAG)
        e1 = EEq(xs, EEmptyList().with_type(xs.type))
        e2 = EUnaryOp(UOp.Empty, xs)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    # def test_regression6(self):
    #     x = EVar("x").with_type(INT)
    #     xs = EVar("xs").with_type(INT_BAG)
    #     e1 = EIn(x, EStateVar(EUnaryOp(UOp.Distinct, xs)))
    #     e2 = EMapGet(EStateVar(EMakeMap2(xs, mk_lambda(INT, lambda x: T))), x)
    #     assert retypecheck(e1)
    #     assert retypecheck(e2)
    #     assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    def test_regression7(self):
        e1 = EVar("xs").with_type(INT_BAG)
        e2 = EUnaryOp(UOp.Distinct, e1).with_type(INT_BAG)
        assert cardinality_le(e2, e1, T)

    def test_regression8(self):
        xs = EVar("xs").with_type(INT_BAG)
        e1 = EUnaryOp(UOp.Distinct, xs).with_type(INT_BAG)
        e2 = EUnaryOp(UOp.Distinct, e1).with_type(INT_BAG)
        assert cardinality_le(e1, e2, T)
        assert cardinality_le(e2, e1, T)

    # def test_regression9(self):
    #     t = THandle("Conn", TRecord((("conn_host", INT),)))
    #     c = EVar("c").with_type(t)
    #     conns = EVar("conns").with_type(TBag(t))
    #     _var3100915 = EVar("_var3100915").with_type(t)
    #     f = ELambda(_var3100915, EGetField(EGetField(_var3100915, "val"), "conn_host"))
    #     # Map {(\_var3100915 -> ((_var3100915).val).conn_host)} (((EStateVar(conns) + [c]) - [_var3100915]))
    #     e1 = EMap(EBinOp(EBinOp(conns, "+", ESingleton(c)), "-", ESingleton(_var3100915)), f)
    #     assert retypecheck(e1)
    #     # Map {(\_var3100915 -> ((_var3100915).val).conn_host)} (((((EStateVar(conns) + [c]) - [_var3100915]) + [c]) - [_var3100915]))
    #     e2 = EMap(EBinOp(EBinOp(EBinOp(EBinOp(conns, "+", ESingleton(c)), "-", ESingleton(_var3100915)), "+", ESingleton(c)), "-", ESingleton(_var3100915)), f)
    #     assert retypecheck(e2)
    #     assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression10(self):
        t = THandle("Conn", TRecord((("conn_host", INT),)))
        c = EVar("c").with_type(t)
        conns = EVar("conns").with_type(TBag(t))
        _var3100915 = EVar("_var3100915").with_type(t)
        e1 = EBinOp(EBinOp(conns, "+", ESingleton(c)), "-", ESingleton(_var3100915))
        e2 = EBinOp(EBinOp(EBinOp(EBinOp(conns, "+", ESingleton(c)), "-", ESingleton(_var3100915)), "+", ESingleton(c)), "-", ESingleton(_var3100915))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)
        # assert cardinality_le(e1, e2, T, debug=True)
        # assert cardinality_le(e2, e1, T, debug=True)

    def test_regression11(self):
        e1 = ECond(EMapGet(EStateVar(EMakeMap2(EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var106064').with_type(TNative('HostAndPort')), EBool(True).with_type(TBool()))).with_type(TMap(TNative('HostAndPort'), TBool()))).with_type(TMap(TNative('HostAndPort'), TBool())), EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBool()), EBinOp(EStateVar(EUnaryOp('distinct', EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), '-', ESingleton(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), EEmptyList().with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))
        e2 = EBinOp(EStateVar(ECond(EUnaryOp('unique', EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBool()), EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), EEmptyList().with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), '-', ESingleton(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))
        e3 = ECond(EMapGet(EStateVar(EMakeMap2(EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var106064').with_type(TNative('HostAndPort')), EBool(True).with_type(TBool()))).with_type(TMap(TNative('HostAndPort'), TBool()))).with_type(TMap(TNative('HostAndPort'), TBool())), EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBool()), EBinOp(EStateVar(EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), '-', EBinOp(ESingleton(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBag(TNative('HostAndPort'))), '+', ESingleton(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), EEmptyList().with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))
        self.check_transitive(e1, e2, e3)

    def test_regression12(self):
        e1 = EUnaryOp('empty', ECond(EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()), EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBool())
        e2 = EBinOp(EUnaryOp('len', EFilter(ECond(EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()), EEmptyList().with_type(TBag(TNative('T'))), EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool())
        e3 = EUnaryOp('empty', ECond(EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()), ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBool())
        self.check_transitive(e1, e2, e3)

    def test_regression13(self):
        e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        e3 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        self.check_transitive(e1, e2, e3)

    def test_regression14(self):
        e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        e3 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        self.check_transitive(e1, e2, e3)

    def test_regression15(self):
        e1 = EBinOp(EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        e2 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        e3 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        self.check_transitive(e1, e2, e3)

    # def test_regression16(self):
    #     e1 = EBinOp(EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression17(self):
    #     e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression18(self):
    #     e1 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression19(self):
    #     e1 = EFlatMap(EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EFlatMap(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EFlatMap(EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression20(self):
    #     e1 = EBinOp(EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EFlatMap(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EFlatMap(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression21(self):
    #     e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression22(self):
    #     e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression23(self):
    #     e1 = EBinOp(EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression24(self):
    #     e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression25(self):
    #     e1 = EFlatMap(EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EFlatMap(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EFlatMap(EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression26(self):
    #     e1 = EBinOp(EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EFlatMap(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EFlatMap(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression27(self):
    #     e1 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression28(self):
    #     e1 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression29(self):
    #     e1 = EFlatMap(EBinOp(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EFlatMap(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression30(self):
    #     e1 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression31(self):
    #     e1 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression32(self):
    #     e1 = ECond(EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()), ECond(EBinOp(EUnaryOp('len', EFilter(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457689').with_type(TNative('T')), EBinOp(EStateVar(EArgMin(EVar('xs').with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), ENum(1).with_type(TInt()))).with_type(TNative('T'))).with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool()), ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), EEmptyList().with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e2 = EFilter(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))
    #     e3 = EBinOp(EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression33(self):
    #     e1 = EBinOp(EStateVar(EArgMin(EVar('xs').with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), ENum(1).with_type(TInt()))).with_type(TNative('T'))).with_type(TNative('T')), 'in', EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TBool())
    #     e2 = EBinOp(EUnaryOp('len', EFilter(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool())
    #     e3 = EBinOp(EUnaryOp('len', EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TInt()), '>', ECond(EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()), ENum(1).with_type(TInt()), ENum(0).with_type(TInt())).with_type(TInt())).with_type(TBool())
    #     self.check_transitive(e1, e2, e3)

    # def test_regression34(self):
    #     e1 = EUnaryOp('empty', ECond(EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()), EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBool())
    #     e2 = EBinOp(EUnaryOp('len', EFilter(ECond(EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()), EEmptyList().with_type(TBag(TNative('T'))), EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool())
    #     e3 = EUnaryOp('empty', ECond(EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()), ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBool())
    #     self.check_transitive(e1, e2, e3)

    # def test_regression35(self):
    #     e1 = EFlatMap(EBinOp(ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', EFlatMap(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EFlatMap(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression36(self):
    #     e1 = EFlatMap(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', EFlatMap(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EFlatMap(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression37(self):
    #     e1 = EFlatMap(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     e2 = EBinOp(EFlatMap(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T'))), '+', EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
    #     e3 = EFlatMap(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '-', ESingleton(EVar('x').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var6457688').with_type(TNative('T')), EBinOp(EVar('x').with_type(TNative('T')), '==', EVar('_var6457688').with_type(TNative('T'))).with_type(TBool()))).with_type(TBag(TNative('T'))))).with_type(TBag(TNative('T')))
    #     self.check_transitive(e1, e2, e3)

    def test_min_distinct1(self):
        t = TNative("Foo")
        f = mk_lambda(t, lambda x: x)
        xs = EVar("xs").with_type(TBag(t))
        x = EVar("x").with_type(t)
        e1 = EArgMin(EBinOp(ESingleton(EStateVar(EArgMin(xs, f))), "+", ESingleton(x)), f)
        e2 = EArgMin(EBinOp(EUnaryOp(UOp.Distinct, EStateVar(xs)), "+", ESingleton(x)), f)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_min_distinct2(self):
        e1 = ECond(EStateVar(EUnaryOp('exists', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBool())).with_type(TBool()), EArgMin(EBinOp(ESingleton(EStateVar(EArgMin(EVar('xs').with_type(TBag(TNative('T'))), ELambda(EVar('_var814').with_type(TNative('T')), EVar('_var814').with_type(TNative('T')))).with_type(TNative('T'))).with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('i').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var814').with_type(TNative('T')), EVar('_var814').with_type(TNative('T')))).with_type(TNative('T')), EVar('i').with_type(TNative('T'))).with_type(TNative('T'))
        e2 = ECond(EStateVar(EUnaryOp('exists', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBool())).with_type(TBool()), EArgMin(EBinOp(EStateVar(EUnaryOp('distinct', EMap(EVar('xs').with_type(TBag(TNative('T'))), ELambda(EVar('_var814').with_type(TNative('T')), EArgMin(EVar('xs').with_type(TBag(TNative('T'))), ELambda(EVar('_var814').with_type(TNative('T')), EVar('_var814').with_type(TNative('T')))).with_type(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('i').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var814').with_type(TNative('T')), EVar('_var814').with_type(TNative('T')))).with_type(TNative('T')), EVar('i').with_type(TNative('T'))).with_type(TNative('T'))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_min_distinct3(self):
        e1 = ECond(EBinOp(EArgMin(EBinOp(ESingleton(EStateVar(EArgMin(EVar('xs').with_type(TBag(TNative('T'))), ELambda(EVar('_var2326292').with_type(TNative('T')), EVar('_var2326292').with_type(TNative('T')))).with_type(TNative('T'))).with_type(TNative('T'))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('i').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var2326292').with_type(TNative('T')), EVar('_var2326292').with_type(TNative('T')))).with_type(TNative('T')), 'in', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBool()), EEmptyList().with_type(TBag(TNative('T'))), ESingleton(EVar('i').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        e2 = ECond(EBinOp(EArgMin(EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), '+', ESingleton(EVar('i').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T'))), ELambda(EVar('_var2326292').with_type(TNative('T')), EVar('_var2326292').with_type(TNative('T')))).with_type(TNative('T')), 'in', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))).with_type(TBool()), EEmptyList().with_type(TBag(TNative('T'))), ESingleton(EVar('i').with_type(TNative('T'))).with_type(TBag(TNative('T')))).with_type(TBag(TNative('T')))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_in_vs_eq(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        e1 = EEq(x, y)
        e2 = EIn(x, ESingleton(y).with_type(INT_BAG))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression38(self):
        e1 = EStateVar(EGetField(ETupleGet(EArgMin(EFilter(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EBinOp(EGetField(EMakeRecord((('score', EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat())), ('startOffset', ENum(0).with_type(TInt())), ('endOffset', ENum(0).with_type(TInt())), ('important', EBool(False).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt()))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt())).with_type(TInt())
        e2 = EStateVar(EGetField(ETupleGet(EArgMin(EFilter(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EBinOp(EGetField(EMakeRecord((('score', EGetField(EMakeRecord((('score', EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat())), ('startOffset', ENum(0).with_type(TInt())), ('endOffset', ENum(0).with_type(TInt())), ('important', EBool(False).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat())), ('startOffset', ENum(0).with_type(TInt())), ('endOffset', ENum(0).with_type(TInt())), ('important', EBool(False).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt()))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt())).with_type(TInt())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)
